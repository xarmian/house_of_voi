/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "post_update()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bootstrap()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bootstrap_cost()uint64": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transfer_ownership(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_yield_bearing_source(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "revoke_yield_bearing_source(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burn_yield_fuse()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burn_stakeable_fuse()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burn_upgradeable_fuse()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deposit()uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deposit_cost()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdraw(uint256)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_name()byte[32]": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_symbol()byte[8]": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_decimals()uint8": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_totalSupply()uint256": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_balanceOf(address)uint256": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_allowance(address,address)uint256": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_transferFrom(address,address,uint256)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_transfer(address,uint256)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc200_approve(address,uint256)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_owner()address": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_version(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "approve_update(bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "grant_upgrader(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_delegate(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transfer(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpjb250cmFjdC5ZaWVsZEJlYXJpbmdUb2tlbi5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToxNTY5LTE1NzAKICAgIC8vICMgaW1wbGVtZW50cyBCb290c3RyYXBwZWRJbnRlcmZhY2UKICAgIC8vIGNsYXNzIFlpZWxkQmVhcmluZ1Rva2VuKEFSQzIwMFRva2VuLCBPd25hYmxlLCBVcGdyYWRlYWJsZSwgU3Rha2VhYmxlKToKICAgIGludCAxCiAgICByZXR1cm4K"
  },
  "state": {
    "global": {
      "num_byte_slices": 6,
      "num_uints": 8
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "bootstrap_active": {
          "type": "uint64",
          "key": "bootstrap_active"
        },
        "contract_version": {
          "type": "uint64",
          "key": "contract_version"
        },
        "decimals": {
          "type": "uint64",
          "key": "decimals"
        },
        "delegate": {
          "type": "bytes",
          "key": "delegate"
        },
        "deployment_version": {
          "type": "uint64",
          "key": "deployment_version"
        },
        "name": {
          "type": "bytes",
          "key": "name"
        },
        "owner": {
          "type": "bytes",
          "key": "owner"
        },
        "stakeable": {
          "type": "uint64",
          "key": "stakeable"
        },
        "symbol": {
          "type": "bytes",
          "key": "symbol"
        },
        "totalSupply": {
          "type": "bytes",
          "key": "totalSupply"
        },
        "updatable": {
          "type": "uint64",
          "key": "updatable"
        },
        "upgrader": {
          "type": "bytes",
          "key": "upgrader"
        },
        "yield_bearing_source": {
          "type": "uint64",
          "key": "yield_bearing_source"
        },
        "yield_fuse_active": {
          "type": "uint64",
          "key": "yield_fuse_active"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "YieldBearingToken",
    "desc": "\n    A simple yield bearing token\n    ",
    "methods": [
      {
        "name": "post_update",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Post upgrade"
      },
      {
        "name": "bootstrap",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Bootstrap the contract"
      },
      {
        "name": "bootstrap_cost",
        "args": [],
        "readonly": true,
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "transfer_ownership",
        "args": [
          {
            "type": "address",
            "name": "new_owner"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Transfer the ownership of the contract"
      },
      {
        "name": "set_yield_bearing_source",
        "args": [
          {
            "type": "uint64",
            "name": "app_id"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Set the yield bearing source"
      },
      {
        "name": "revoke_yield_bearing_source",
        "args": [
          {
            "type": "address",
            "name": "new_owner"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Revoke the yield bearing source by transferring ownership to a new owner"
      },
      {
        "name": "burn_yield_fuse",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Burn the yield fuse"
      },
      {
        "name": "burn_stakeable_fuse",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Burn the stakeable fuse"
      },
      {
        "name": "burn_upgradeable_fuse",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Burn the upgradeable fuse"
      },
      {
        "name": "deposit",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "uint256",
          "desc": "The number of shares minted"
        },
        "desc": "Deposit funds into the contract"
      },
      {
        "name": "deposit_cost",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "withdraw",
        "args": [
          {
            "type": "uint256",
            "name": "amount"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        },
        "desc": "Withdraw funds from the contract"
      },
      {
        "name": "arc200_name",
        "args": [],
        "readonly": true,
        "returns": {
          "type": "byte[32]"
        }
      },
      {
        "name": "arc200_symbol",
        "args": [],
        "readonly": true,
        "returns": {
          "type": "byte[8]"
        }
      },
      {
        "name": "arc200_decimals",
        "args": [],
        "readonly": true,
        "returns": {
          "type": "uint8"
        }
      },
      {
        "name": "arc200_totalSupply",
        "args": [],
        "readonly": true,
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "arc200_balanceOf",
        "args": [
          {
            "type": "address",
            "name": "account"
          }
        ],
        "readonly": true,
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "arc200_allowance",
        "args": [
          {
            "type": "address",
            "name": "owner"
          },
          {
            "type": "address",
            "name": "spender"
          }
        ],
        "readonly": true,
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "arc200_transferFrom",
        "args": [
          {
            "type": "address",
            "name": "sender"
          },
          {
            "type": "address",
            "name": "recipient"
          },
          {
            "type": "uint256",
            "name": "amount"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "arc200_transfer",
        "args": [
          {
            "type": "address",
            "name": "recipient"
          },
          {
            "type": "uint256",
            "name": "amount"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "arc200_approve",
        "args": [
          {
            "type": "address",
            "name": "spender"
          },
          {
            "type": "uint256",
            "name": "amount"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "get_owner",
        "args": [],
        "readonly": true,
        "returns": {
          "type": "address"
        },
        "desc": "Get the owner of the contract"
      },
      {
        "name": "set_version",
        "args": [
          {
            "type": "uint64",
            "name": "contract_version"
          },
          {
            "type": "uint64",
            "name": "deployment_version"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "approve_update",
        "args": [
          {
            "type": "bool",
            "name": "approval"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "grant_upgrader",
        "args": [
          {
            "type": "address",
            "name": "upgrader"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_delegate",
        "args": [
          {
            "type": "address",
            "name": "delegate"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "participate",
        "args": [
          {
            "type": "byte[32]",
            "name": "vote_k"
          },
          {
            "type": "byte[32]",
            "name": "sel_k"
          },
          {
            "type": "uint64",
            "name": "vote_fst"
          },
          {
            "type": "uint64",
            "name": "vote_lst"
          },
          {
            "type": "uint64",
            "name": "vote_kd"
          },
          {
            "type": "byte[64]",
            "name": "sp_key"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "transfer",
        "args": [
          {
            "type": "address",
            "name": "new_owner"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event."
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "update_application": "CALL",
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the YieldBearingToken smart contract.
 */
export type YieldBearingToken = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'post_update()void' | 'post_update', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'bootstrap()void' | 'bootstrap', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'bootstrap_cost()uint64' | 'bootstrap_cost', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'transfer_ownership(address)void' | 'transfer_ownership', {
      argsObj: {
        newOwner: string
      }
      argsTuple: [newOwner: string]
      returns: void
    }>
    & Record<'set_yield_bearing_source(uint64)void' | 'set_yield_bearing_source', {
      argsObj: {
        appId: bigint | number
      }
      argsTuple: [appId: bigint | number]
      returns: void
    }>
    & Record<'revoke_yield_bearing_source(address)void' | 'revoke_yield_bearing_source', {
      argsObj: {
        newOwner: string
      }
      argsTuple: [newOwner: string]
      returns: void
    }>
    & Record<'burn_yield_fuse()void' | 'burn_yield_fuse', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'burn_stakeable_fuse()void' | 'burn_stakeable_fuse', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'burn_upgradeable_fuse()void' | 'burn_upgradeable_fuse', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'deposit()uint256' | 'deposit', {
      argsObj: {
      }
      argsTuple: []
      /**
       * The number of shares minted
       */
      returns: bigint
    }>
    & Record<'deposit_cost()uint64' | 'deposit_cost', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'withdraw(uint256)uint64' | 'withdraw', {
      argsObj: {
        amount: bigint | number
      }
      argsTuple: [amount: bigint | number]
      returns: bigint
    }>
    & Record<'arc200_name()byte[32]' | 'arc200_name', {
      argsObj: {
      }
      argsTuple: []
      returns: Uint8Array
    }>
    & Record<'arc200_symbol()byte[8]' | 'arc200_symbol', {
      argsObj: {
      }
      argsTuple: []
      returns: Uint8Array
    }>
    & Record<'arc200_decimals()uint8' | 'arc200_decimals', {
      argsObj: {
      }
      argsTuple: []
      returns: number
    }>
    & Record<'arc200_totalSupply()uint256' | 'arc200_totalSupply', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'arc200_balanceOf(address)uint256' | 'arc200_balanceOf', {
      argsObj: {
        account: string
      }
      argsTuple: [account: string]
      returns: bigint
    }>
    & Record<'arc200_allowance(address,address)uint256' | 'arc200_allowance', {
      argsObj: {
        owner: string
        spender: string
      }
      argsTuple: [owner: string, spender: string]
      returns: bigint
    }>
    & Record<'arc200_transferFrom(address,address,uint256)bool' | 'arc200_transferFrom', {
      argsObj: {
        sender: string
        recipient: string
        amount: bigint | number
      }
      argsTuple: [sender: string, recipient: string, amount: bigint | number]
      returns: boolean
    }>
    & Record<'arc200_transfer(address,uint256)bool' | 'arc200_transfer', {
      argsObj: {
        recipient: string
        amount: bigint | number
      }
      argsTuple: [recipient: string, amount: bigint | number]
      returns: boolean
    }>
    & Record<'arc200_approve(address,uint256)bool' | 'arc200_approve', {
      argsObj: {
        spender: string
        amount: bigint | number
      }
      argsTuple: [spender: string, amount: bigint | number]
      returns: boolean
    }>
    & Record<'get_owner()address' | 'get_owner', {
      argsObj: {
      }
      argsTuple: []
      returns: string
    }>
    & Record<'set_version(uint64,uint64)void' | 'set_version', {
      argsObj: {
        contractVersion: bigint | number
        deploymentVersion: bigint | number
      }
      argsTuple: [contractVersion: bigint | number, deploymentVersion: bigint | number]
      returns: void
    }>
    & Record<'approve_update(bool)void' | 'approve_update', {
      argsObj: {
        approval: boolean
      }
      argsTuple: [approval: boolean]
      returns: void
    }>
    & Record<'grant_upgrader(address)void' | 'grant_upgrader', {
      argsObj: {
        upgrader: string
      }
      argsTuple: [upgrader: string]
      returns: void
    }>
    & Record<'set_delegate(address)void' | 'set_delegate', {
      argsObj: {
        delegate: string
      }
      argsTuple: [delegate: string]
      returns: void
    }>
    & Record<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void' | 'participate', {
      argsObj: {
        voteK: Uint8Array
        selK: Uint8Array
        voteFst: bigint | number
        voteLst: bigint | number
        voteKd: bigint | number
        spKey: Uint8Array
      }
      argsTuple: [voteK: Uint8Array, selK: Uint8Array, voteFst: bigint | number, voteLst: bigint | number, voteKd: bigint | number, spKey: Uint8Array]
      returns: void
    }>
    & Record<'transfer(address)void' | 'transfer', {
      argsObj: {
        newOwner: string
      }
      argsTuple: [newOwner: string]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      bootstrapActive?: IntegerState
      contractVersion?: IntegerState
      decimals?: IntegerState
      delegate?: BinaryState
      deploymentVersion?: IntegerState
      name?: BinaryState
      owner?: BinaryState
      stakeable?: IntegerState
      symbol?: BinaryState
      totalSupply?: BinaryState
      updatable?: IntegerState
      upgrader?: BinaryState
      yieldBearingSource?: IntegerState
      yieldFuseActive?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type YieldBearingTokenSig = keyof YieldBearingToken['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends YieldBearingTokenSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the YieldBearingToken smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends YieldBearingTokenSig> = YieldBearingToken['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the YieldBearingToken smart contract to the method's return type
 */
export type MethodReturn<TSignature extends YieldBearingTokenSig> = YieldBearingToken['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type YieldBearingTokenCreateCalls = (typeof YieldBearingTokenCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type YieldBearingTokenCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type YieldBearingTokenUpdateCalls = (typeof YieldBearingTokenCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type YieldBearingTokenUpdateCallParams =
  | TypedCallParams<undefined>
/**
 * Defines arguments required for the deploy method.
 */
export type YieldBearingTokenDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: YieldBearingTokenCreateCalls) => YieldBearingTokenCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: YieldBearingTokenUpdateCalls) => YieldBearingTokenUpdateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class YieldBearingTokenCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the YieldBearingToken smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the YieldBearingToken smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the post_update()void ABI method
   *
   * Post upgrade
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static postUpdate(args: MethodArgs<'post_update()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'post_update()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the bootstrap()void ABI method
   *
   * Bootstrap the contract
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bootstrap(args: MethodArgs<'bootstrap()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bootstrap()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the bootstrap_cost()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bootstrapCost(args: MethodArgs<'bootstrap_cost()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bootstrap_cost()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the transfer_ownership(address)void ABI method
   *
   * Transfer the ownership of the contract
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static transferOwnership(args: MethodArgs<'transfer_ownership(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'transfer_ownership(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.newOwner],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_yield_bearing_source(uint64)void ABI method
   *
   * Set the yield bearing source
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setYieldBearingSource(args: MethodArgs<'set_yield_bearing_source(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_yield_bearing_source(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.appId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the revoke_yield_bearing_source(address)void ABI method
   *
   * Revoke the yield bearing source by transferring ownership to a new owner
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static revokeYieldBearingSource(args: MethodArgs<'revoke_yield_bearing_source(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'revoke_yield_bearing_source(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.newOwner],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the burn_yield_fuse()void ABI method
   *
   * Burn the yield fuse
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static burnYieldFuse(args: MethodArgs<'burn_yield_fuse()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'burn_yield_fuse()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the burn_stakeable_fuse()void ABI method
   *
   * Burn the stakeable fuse
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static burnStakeableFuse(args: MethodArgs<'burn_stakeable_fuse()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'burn_stakeable_fuse()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the burn_upgradeable_fuse()void ABI method
   *
   * Burn the upgradeable fuse
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static burnUpgradeableFuse(args: MethodArgs<'burn_upgradeable_fuse()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'burn_upgradeable_fuse()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the deposit()uint256 ABI method
   *
   * Deposit funds into the contract
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deposit(args: MethodArgs<'deposit()uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'deposit()uint256' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the deposit_cost()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static depositCost(args: MethodArgs<'deposit_cost()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'deposit_cost()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the withdraw(uint256)uint64 ABI method
   *
   * Withdraw funds from the contract
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static withdraw(args: MethodArgs<'withdraw(uint256)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'withdraw(uint256)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_name()byte[32] ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200Name(args: MethodArgs<'arc200_name()byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_name()byte[32]' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_symbol()byte[8] ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200Symbol(args: MethodArgs<'arc200_symbol()byte[8]'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_symbol()byte[8]' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_decimals()uint8 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200Decimals(args: MethodArgs<'arc200_decimals()uint8'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_decimals()uint8' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_totalSupply()uint256 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200TotalSupply(args: MethodArgs<'arc200_totalSupply()uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_totalSupply()uint256' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_balanceOf(address)uint256 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200BalanceOf(args: MethodArgs<'arc200_balanceOf(address)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_balanceOf(address)uint256' as const,
      methodArgs: Array.isArray(args) ? args : [args.account],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_allowance(address,address)uint256 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200Allowance(args: MethodArgs<'arc200_allowance(address,address)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_allowance(address,address)uint256' as const,
      methodArgs: Array.isArray(args) ? args : [args.owner, args.spender],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_transferFrom(address,address,uint256)bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200TransferFrom(args: MethodArgs<'arc200_transferFrom(address,address,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_transferFrom(address,address,uint256)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.sender, args.recipient, args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_transfer(address,uint256)bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200Transfer(args: MethodArgs<'arc200_transfer(address,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_transfer(address,uint256)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.recipient, args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the arc200_approve(address,uint256)bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static arc200Approve(args: MethodArgs<'arc200_approve(address,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'arc200_approve(address,uint256)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args.spender, args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_owner()address ABI method
   *
   * Get the owner of the contract
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getOwner(args: MethodArgs<'get_owner()address'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_owner()address' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_version(uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_version(uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.contractVersion, args.deploymentVersion],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the approve_update(bool)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'approve_update(bool)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.approval],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the grant_upgrader(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static grantUpgrader(args: MethodArgs<'grant_upgrader(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'grant_upgrader(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.upgrader],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the set_delegate(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setDelegate(args: MethodArgs<'set_delegate(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'set_delegate(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.delegate],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.voteK, args.selK, args.voteFst, args.voteLst, args.voteKd, args.spKey],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the transfer(address)void ABI method
   *
   * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static transfer(args: MethodArgs<'transfer(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'transfer(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.newOwner],
      ...params,
    }
  }
}

/**
 * A client to make calls to the YieldBearingToken smart contract
 */
export class YieldBearingTokenClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `YieldBearingTokenClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof YieldBearingToken['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the YieldBearingToken smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: YieldBearingTokenDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(YieldBearingTokenCallFactory.create)
    const updateArgs = params.updateCall?.(YieldBearingTokenCallFactory.update)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the YieldBearingToken smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the YieldBearingToken smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The update result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<undefined, AppUpdateCallTransactionResult>(await $this.appClient.update(args))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the YieldBearingToken smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the post_update()void ABI method.
   *
   * Post upgrade
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public postUpdate(args: MethodArgs<'post_update()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(YieldBearingTokenCallFactory.postUpdate(args, params))
  }

  /**
   * Calls the bootstrap()void ABI method.
   *
   * Bootstrap the contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bootstrap(args: MethodArgs<'bootstrap()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(YieldBearingTokenCallFactory.bootstrap(args, params))
  }

  /**
   * Calls the bootstrap_cost()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bootstrapCost(args: MethodArgs<'bootstrap_cost()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(YieldBearingTokenCallFactory.bootstrapCost(args, params))
  }

  /**
   * Calls the transfer_ownership(address)void ABI method.
   *
   * Transfer the ownership of the contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public transferOwnership(args: MethodArgs<'transfer_ownership(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(YieldBearingTokenCallFactory.transferOwnership(args, params))
  }

  /**
   * Calls the set_yield_bearing_source(uint64)void ABI method.
   *
   * Set the yield bearing source
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setYieldBearingSource(args: MethodArgs<'set_yield_bearing_source(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(YieldBearingTokenCallFactory.setYieldBearingSource(args, params))
  }

  /**
   * Calls the revoke_yield_bearing_source(address)void ABI method.
   *
   * Revoke the yield bearing source by transferring ownership to a new owner
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public revokeYieldBearingSource(args: MethodArgs<'revoke_yield_bearing_source(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(YieldBearingTokenCallFactory.revokeYieldBearingSource(args, params))
  }

  /**
   * Calls the burn_yield_fuse()void ABI method.
   *
   * Burn the yield fuse
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public burnYieldFuse(args: MethodArgs<'burn_yield_fuse()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(YieldBearingTokenCallFactory.burnYieldFuse(args, params))
  }

  /**
   * Calls the burn_stakeable_fuse()void ABI method.
   *
   * Burn the stakeable fuse
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public burnStakeableFuse(args: MethodArgs<'burn_stakeable_fuse()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(YieldBearingTokenCallFactory.burnStakeableFuse(args, params))
  }

  /**
   * Calls the burn_upgradeable_fuse()void ABI method.
   *
   * Burn the upgradeable fuse
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public burnUpgradeableFuse(args: MethodArgs<'burn_upgradeable_fuse()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(YieldBearingTokenCallFactory.burnUpgradeableFuse(args, params))
  }

  /**
   * Calls the deposit()uint256 ABI method.
   *
   * Deposit funds into the contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: The number of shares minted
   */
  public deposit(args: MethodArgs<'deposit()uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(YieldBearingTokenCallFactory.deposit(args, params))
  }

  /**
   * Calls the deposit_cost()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public depositCost(args: MethodArgs<'deposit_cost()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(YieldBearingTokenCallFactory.depositCost(args, params))
  }

  /**
   * Calls the withdraw(uint256)uint64 ABI method.
   *
   * Withdraw funds from the contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public withdraw(args: MethodArgs<'withdraw(uint256)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(YieldBearingTokenCallFactory.withdraw(args, params))
  }

  /**
   * Calls the arc200_name()byte[32] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc200Name(args: MethodArgs<'arc200_name()byte[32]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(YieldBearingTokenCallFactory.arc200Name(args, params))
  }

  /**
   * Calls the arc200_symbol()byte[8] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc200Symbol(args: MethodArgs<'arc200_symbol()byte[8]'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(YieldBearingTokenCallFactory.arc200Symbol(args, params))
  }

  /**
   * Calls the arc200_decimals()uint8 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc200Decimals(args: MethodArgs<'arc200_decimals()uint8'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(YieldBearingTokenCallFactory.arc200Decimals(args, params))
  }

  /**
   * Calls the arc200_totalSupply()uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc200TotalSupply(args: MethodArgs<'arc200_totalSupply()uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(YieldBearingTokenCallFactory.arc200TotalSupply(args, params))
  }

  /**
   * Calls the arc200_balanceOf(address)uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc200BalanceOf(args: MethodArgs<'arc200_balanceOf(address)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(YieldBearingTokenCallFactory.arc200BalanceOf(args, params))
  }

  /**
   * Calls the arc200_allowance(address,address)uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc200Allowance(args: MethodArgs<'arc200_allowance(address,address)uint256'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(YieldBearingTokenCallFactory.arc200Allowance(args, params))
  }

  /**
   * Calls the arc200_transferFrom(address,address,uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc200TransferFrom(args: MethodArgs<'arc200_transferFrom(address,address,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(YieldBearingTokenCallFactory.arc200TransferFrom(args, params))
  }

  /**
   * Calls the arc200_transfer(address,uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc200Transfer(args: MethodArgs<'arc200_transfer(address,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(YieldBearingTokenCallFactory.arc200Transfer(args, params))
  }

  /**
   * Calls the arc200_approve(address,uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public arc200Approve(args: MethodArgs<'arc200_approve(address,uint256)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(YieldBearingTokenCallFactory.arc200Approve(args, params))
  }

  /**
   * Calls the get_owner()address ABI method.
   *
   * Get the owner of the contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getOwner(args: MethodArgs<'get_owner()address'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(YieldBearingTokenCallFactory.getOwner(args, params))
  }

  /**
   * Calls the set_version(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(YieldBearingTokenCallFactory.setVersion(args, params))
  }

  /**
   * Calls the approve_update(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(YieldBearingTokenCallFactory.approveUpdate(args, params))
  }

  /**
   * Calls the grant_upgrader(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public grantUpgrader(args: MethodArgs<'grant_upgrader(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(YieldBearingTokenCallFactory.grantUpgrader(args, params))
  }

  /**
   * Calls the set_delegate(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setDelegate(args: MethodArgs<'set_delegate(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(YieldBearingTokenCallFactory.setDelegate(args, params))
  }

  /**
   * Calls the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(YieldBearingTokenCallFactory.participate(args, params))
  }

  /**
   * Calls the transfer(address)void ABI method.
   *
   * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public transfer(args: MethodArgs<'transfer(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(YieldBearingTokenCallFactory.transfer(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<YieldBearingToken['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get bootstrapActive() {
        return YieldBearingTokenClient.getIntegerState(state, 'bootstrap_active')
      },
      get contractVersion() {
        return YieldBearingTokenClient.getIntegerState(state, 'contract_version')
      },
      get decimals() {
        return YieldBearingTokenClient.getIntegerState(state, 'decimals')
      },
      get delegate() {
        return YieldBearingTokenClient.getBinaryState(state, 'delegate')
      },
      get deploymentVersion() {
        return YieldBearingTokenClient.getIntegerState(state, 'deployment_version')
      },
      get name() {
        return YieldBearingTokenClient.getBinaryState(state, 'name')
      },
      get owner() {
        return YieldBearingTokenClient.getBinaryState(state, 'owner')
      },
      get stakeable() {
        return YieldBearingTokenClient.getIntegerState(state, 'stakeable')
      },
      get symbol() {
        return YieldBearingTokenClient.getBinaryState(state, 'symbol')
      },
      get totalSupply() {
        return YieldBearingTokenClient.getBinaryState(state, 'totalSupply')
      },
      get updatable() {
        return YieldBearingTokenClient.getIntegerState(state, 'updatable')
      },
      get upgrader() {
        return YieldBearingTokenClient.getBinaryState(state, 'upgrader')
      },
      get yieldBearingSource() {
        return YieldBearingTokenClient.getIntegerState(state, 'yield_bearing_source')
      },
      get yieldFuseActive() {
        return YieldBearingTokenClient.getIntegerState(state, 'yield_fuse_active')
      },
    }
  }

  public compose(): YieldBearingTokenComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      postUpdate(args: MethodArgs<'post_update()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.postUpdate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      bootstrap(args: MethodArgs<'bootstrap()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.bootstrap(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      bootstrapCost(args: MethodArgs<'bootstrap_cost()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.bootstrapCost(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      transferOwnership(args: MethodArgs<'transfer_ownership(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.transferOwnership(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setYieldBearingSource(args: MethodArgs<'set_yield_bearing_source(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setYieldBearingSource(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      revokeYieldBearingSource(args: MethodArgs<'revoke_yield_bearing_source(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.revokeYieldBearingSource(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      burnYieldFuse(args: MethodArgs<'burn_yield_fuse()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.burnYieldFuse(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      burnStakeableFuse(args: MethodArgs<'burn_stakeable_fuse()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.burnStakeableFuse(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      burnUpgradeableFuse(args: MethodArgs<'burn_upgradeable_fuse()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.burnUpgradeableFuse(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      deposit(args: MethodArgs<'deposit()uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.deposit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      depositCost(args: MethodArgs<'deposit_cost()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.depositCost(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      withdraw(args: MethodArgs<'withdraw(uint256)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.withdraw(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200Name(args: MethodArgs<'arc200_name()byte[32]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200Name(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200Symbol(args: MethodArgs<'arc200_symbol()byte[8]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200Symbol(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200Decimals(args: MethodArgs<'arc200_decimals()uint8'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200Decimals(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200TotalSupply(args: MethodArgs<'arc200_totalSupply()uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200TotalSupply(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200BalanceOf(args: MethodArgs<'arc200_balanceOf(address)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200BalanceOf(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200Allowance(args: MethodArgs<'arc200_allowance(address,address)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200Allowance(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200TransferFrom(args: MethodArgs<'arc200_transferFrom(address,address,uint256)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200TransferFrom(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200Transfer(args: MethodArgs<'arc200_transfer(address,uint256)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200Transfer(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      arc200Approve(args: MethodArgs<'arc200_approve(address,uint256)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.arc200Approve(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getOwner(args: MethodArgs<'get_owner()address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getOwner(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setVersion(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.approveUpdate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      grantUpgrader(args: MethodArgs<'grant_upgrader(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.grantUpgrader(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setDelegate(args: MethodArgs<'set_delegate(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setDelegate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.participate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      transfer(args: MethodArgs<'transfer(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.transfer(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientComposeCallCoreParams & AppClientCompilationParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.update.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as YieldBearingTokenComposer
  }
}
export type YieldBearingTokenComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the post_update()void ABI method.
   *
   * Post upgrade
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  postUpdate(args: MethodArgs<'post_update()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): YieldBearingTokenComposer<[...TReturns, MethodReturn<'post_update()void'>]>

  /**
   * Calls the bootstrap()void ABI method.
   *
   * Bootstrap the contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(args: MethodArgs<'bootstrap()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): YieldBearingTokenComposer<[...TReturns, MethodReturn<'bootstrap()void'>]>

  /**
   * Calls the bootstrap_cost()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrapCost(args: MethodArgs<'bootstrap_cost()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): YieldBearingTokenComposer<[...TReturns, MethodReturn<'bootstrap_cost()uint64'>]>

  /**
   * Calls the transfer_ownership(address)void ABI method.
   *
   * Transfer the ownership of the contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transferOwnership(args: MethodArgs<'transfer_ownership(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): YieldBearingTokenComposer<[...TReturns, MethodReturn<'transfer_ownership(address)void'>]>

  /**
   * Calls the set_yield_bearing_source(uint64)void ABI method.
   *
   * Set the yield bearing source
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setYieldBearingSource(args: MethodArgs<'set_yield_bearing_source(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): YieldBearingTokenComposer<[...TReturns, MethodReturn<'set_yield_bearing_source(uint64)void'>]>

  /**
   * Calls the revoke_yield_bearing_source(address)void ABI method.
   *
   * Revoke the yield bearing source by transferring ownership to a new owner
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  revokeYieldBearingSource(args: MethodArgs<'revoke_yield_bearing_source(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): YieldBearingTokenComposer<[...TReturns, MethodReturn<'revoke_yield_bearing_source(address)void'>]>

  /**
   * Calls the burn_yield_fuse()void ABI method.
   *
   * Burn the yield fuse
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnYieldFuse(args: MethodArgs<'burn_yield_fuse()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): YieldBearingTokenComposer<[...TReturns, MethodReturn<'burn_yield_fuse()void'>]>

  /**
   * Calls the burn_stakeable_fuse()void ABI method.
   *
   * Burn the stakeable fuse
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnStakeableFuse(args: MethodArgs<'burn_stakeable_fuse()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): YieldBearingTokenComposer<[...TReturns, MethodReturn<'burn_stakeable_fuse()void'>]>

  /**
   * Calls the burn_upgradeable_fuse()void ABI method.
   *
   * Burn the upgradeable fuse
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  burnUpgradeableFuse(args: MethodArgs<'burn_upgradeable_fuse()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): YieldBearingTokenComposer<[...TReturns, MethodReturn<'burn_upgradeable_fuse()void'>]>

  /**
   * Calls the deposit()uint256 ABI method.
   *
   * Deposit funds into the contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deposit(args: MethodArgs<'deposit()uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): YieldBearingTokenComposer<[...TReturns, MethodReturn<'deposit()uint256'>]>

  /**
   * Calls the deposit_cost()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  depositCost(args: MethodArgs<'deposit_cost()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): YieldBearingTokenComposer<[...TReturns, MethodReturn<'deposit_cost()uint64'>]>

  /**
   * Calls the withdraw(uint256)uint64 ABI method.
   *
   * Withdraw funds from the contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdraw(args: MethodArgs<'withdraw(uint256)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): YieldBearingTokenComposer<[...TReturns, MethodReturn<'withdraw(uint256)uint64'>]>

  /**
   * Calls the arc200_name()byte[32] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Name(args: MethodArgs<'arc200_name()byte[32]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): YieldBearingTokenComposer<[...TReturns, MethodReturn<'arc200_name()byte[32]'>]>

  /**
   * Calls the arc200_symbol()byte[8] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Symbol(args: MethodArgs<'arc200_symbol()byte[8]'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): YieldBearingTokenComposer<[...TReturns, MethodReturn<'arc200_symbol()byte[8]'>]>

  /**
   * Calls the arc200_decimals()uint8 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Decimals(args: MethodArgs<'arc200_decimals()uint8'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): YieldBearingTokenComposer<[...TReturns, MethodReturn<'arc200_decimals()uint8'>]>

  /**
   * Calls the arc200_totalSupply()uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200TotalSupply(args: MethodArgs<'arc200_totalSupply()uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): YieldBearingTokenComposer<[...TReturns, MethodReturn<'arc200_totalSupply()uint256'>]>

  /**
   * Calls the arc200_balanceOf(address)uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200BalanceOf(args: MethodArgs<'arc200_balanceOf(address)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): YieldBearingTokenComposer<[...TReturns, MethodReturn<'arc200_balanceOf(address)uint256'>]>

  /**
   * Calls the arc200_allowance(address,address)uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Allowance(args: MethodArgs<'arc200_allowance(address,address)uint256'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): YieldBearingTokenComposer<[...TReturns, MethodReturn<'arc200_allowance(address,address)uint256'>]>

  /**
   * Calls the arc200_transferFrom(address,address,uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200TransferFrom(args: MethodArgs<'arc200_transferFrom(address,address,uint256)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): YieldBearingTokenComposer<[...TReturns, MethodReturn<'arc200_transferFrom(address,address,uint256)bool'>]>

  /**
   * Calls the arc200_transfer(address,uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Transfer(args: MethodArgs<'arc200_transfer(address,uint256)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): YieldBearingTokenComposer<[...TReturns, MethodReturn<'arc200_transfer(address,uint256)bool'>]>

  /**
   * Calls the arc200_approve(address,uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Approve(args: MethodArgs<'arc200_approve(address,uint256)bool'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): YieldBearingTokenComposer<[...TReturns, MethodReturn<'arc200_approve(address,uint256)bool'>]>

  /**
   * Calls the get_owner()address ABI method.
   *
   * Get the owner of the contract
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getOwner(args: MethodArgs<'get_owner()address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): YieldBearingTokenComposer<[...TReturns, MethodReturn<'get_owner()address'>]>

  /**
   * Calls the set_version(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setVersion(args: MethodArgs<'set_version(uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): YieldBearingTokenComposer<[...TReturns, MethodReturn<'set_version(uint64,uint64)void'>]>

  /**
   * Calls the approve_update(bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approveUpdate(args: MethodArgs<'approve_update(bool)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): YieldBearingTokenComposer<[...TReturns, MethodReturn<'approve_update(bool)void'>]>

  /**
   * Calls the grant_upgrader(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  grantUpgrader(args: MethodArgs<'grant_upgrader(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): YieldBearingTokenComposer<[...TReturns, MethodReturn<'grant_upgrader(address)void'>]>

  /**
   * Calls the set_delegate(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setDelegate(args: MethodArgs<'set_delegate(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): YieldBearingTokenComposer<[...TReturns, MethodReturn<'set_delegate(address)void'>]>

  /**
   * Calls the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  participate(args: MethodArgs<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): YieldBearingTokenComposer<[...TReturns, MethodReturn<'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void'>]>

  /**
   * Calls the transfer(address)void ABI method.
   *
   * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transfer(args: MethodArgs<'transfer(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): YieldBearingTokenComposer<[...TReturns, MethodReturn<'transfer(address)void'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the YieldBearingToken smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientComposeCallCoreParams & AppClientCompilationParams & CoreAppCallArgs): YieldBearingTokenComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the YieldBearingToken smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): YieldBearingTokenComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): YieldBearingTokenComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<YieldBearingTokenComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<YieldBearingTokenComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type YieldBearingTokenComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type YieldBearingTokenComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}

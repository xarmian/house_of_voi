/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils';
import { AtomicTransactionComposer, modelsv2 } from 'algosdk';
export const APP_SPEC = {
    "hints": {
        "hello_world()string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "hello_you(string)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "hello_you_again(string,uint64)string": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "transfer(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpjb250cmFjdC5IZWxsb1dvcmxkLmFwcHJvdmFsX3Byb2dyYW06CiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYm56IG1haW5fZW50cnlwb2ludEAyCiAgICBjYWxsc3ViIF9faW5pdF9fCgptYWluX2VudHJ5cG9pbnRAMjoKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MTQKICAgIC8vIGNsYXNzIEhlbGxvV29ybGQoT3duYWJsZSk6CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9iYXJlX3JvdXRpbmdAMTAKICAgIG1ldGhvZCAiaGVsbG9fd29ybGQoKXN0cmluZyIKICAgIG1ldGhvZCAiaGVsbG9feW91KHN0cmluZylzdHJpbmciCiAgICBtZXRob2QgImhlbGxvX3lvdV9hZ2FpbihzdHJpbmcsdWludDY0KXN0cmluZyIKICAgIG1ldGhvZCAidHJhbnNmZXIoYWRkcmVzcyl2b2lkIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggbWFpbl9oZWxsb193b3JsZF9yb3V0ZUA0IG1haW5faGVsbG9feW91X3JvdXRlQDUgbWFpbl9oZWxsb195b3VfYWdhaW5fcm91dGVANiBtYWluX3RyYW5zZmVyX3JvdXRlQDcKICAgIGVyciAvLyByZWplY3QgdHJhbnNhY3Rpb24KCm1haW5faGVsbG9fd29ybGRfcm91dGVANDoKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBoZWxsb193b3JsZAogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGUgMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5faGVsbG9feW91X3JvdXRlQDU6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjI4CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MTQKICAgIC8vIGNsYXNzIEhlbGxvV29ybGQoT3duYWJsZSk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyOAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIGhlbGxvX3lvdQogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGUgMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5faGVsbG9feW91X2FnYWluX3JvdXRlQDY6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjMyCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MTQKICAgIC8vIGNsYXNzIEhlbGxvV29ybGQoT3duYWJsZSk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgYnRvaQogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTozMgogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIGhlbGxvX3lvdV9hZ2FpbgogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGUgMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fdHJhbnNmZXJfcm91dGVANzoKICAgIC8vIHVzci9sb2NhbC9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL29wZW5zdWJtYXJpbmUvY29udHJhY3RzL2FjY2Vzcy9Pd25hYmxlL2NvbnRyYWN0LnB5OjM1CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MTQKICAgIC8vIGNsYXNzIEhlbGxvV29ybGQoT3duYWJsZSk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyB1c3IvbG9jYWwvbGliL3B5dGhvbjMuMTIvc2l0ZS1wYWNrYWdlcy9vcGVuc3VibWFyaW5lL2NvbnRyYWN0cy9hY2Nlc3MvT3duYWJsZS9jb250cmFjdC5weTozNQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIHRyYW5zZmVyCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX2JhcmVfcm91dGluZ0AxMDoKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MTQKICAgIC8vIGNsYXNzIEhlbGxvV29ybGQoT3duYWJsZSk6CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gcmVqZWN0IHRyYW5zYWN0aW9uCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGlzIGNyZWF0aW5nCiAgICBpbnQgMQogICAgcmV0dXJuCgoKLy8gY29udHJhY3QuSGVsbG9Xb3JsZC5oZWxsb193b3JsZCgpIC0+IGJ5dGVzOgpoZWxsb193b3JsZDoKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjQtMjUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGhlbGxvX3dvcmxkKHNlbGYpIC0+IFN0cmluZzoKICAgIHByb3RvIDAgMQogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyNgogICAgLy8gcmV0dXJuIFN0cmluZygiSGVsbG8sIFdvcmxkISIpCiAgICBieXRlICJIZWxsbywgV29ybGQhIgogICAgcmV0c3ViCgoKLy8gY29udHJhY3QuSGVsbG9Xb3JsZC5oZWxsb195b3UoeW91OiBieXRlcykgLT4gYnl0ZXM6CmhlbGxvX3lvdToKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjgtMjkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGhlbGxvX3lvdShzZWxmLCB5b3U6IFN0cmluZykgLT4gU3RyaW5nOgogICAgcHJvdG8gMSAxCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjMwCiAgICAvLyByZXR1cm4gIkhlbGxvLCAiICsgeW91CiAgICBieXRlICJIZWxsbywgIgogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIHJldHN1YgoKCi8vIGNvbnRyYWN0LkhlbGxvV29ybGQuaGVsbG9feW91X2FnYWluKHlvdTogYnl0ZXMsIGRlcHRoOiB1aW50NjQpIC0+IGJ5dGVzOgpoZWxsb195b3VfYWdhaW46CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjMyLTMzCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBoZWxsb195b3VfYWdhaW4oc2VsZiwgeW91OiBTdHJpbmcsIGRlcHRoOiBVSW50NjQpIC0+IFN0cmluZzoKICAgIHByb3RvIDIgMQogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTozNAogICAgLy8gcmV0dXJuICJIZWxsbywgIiArIHNlbGYucmVwZWF0KHlvdSwgZGVwdGgpCiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyAtMQogICAgY2FsbHN1YiByZXBlYXQKICAgIGJ5dGUgIkhlbGxvLCAiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIHJldHN1YgoKCi8vIGNvbnRyYWN0LkhlbGxvV29ybGQucmVwZWF0KHlvdTogYnl0ZXMsIGRlcHRoOiB1aW50NjQpIC0+IGJ5dGVzOgpyZXBlYXQ6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjM2LTM3CiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIHJlcGVhdChzZWxmLCB5b3U6IFN0cmluZywgZGVwdGg6IFVJbnQ2NCkgLT4gU3RyaW5nOgogICAgcHJvdG8gMiAxCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjM4CiAgICAvLyBpZiBkZXB0aCA9PSAwOgogICAgZnJhbWVfZGlnIC0xCiAgICBibnogcmVwZWF0X2Vsc2VfYm9keUAyCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjM5CiAgICAvLyByZXR1cm4gU3RyaW5nKCIiKQogICAgYnl0ZSAiIgogICAgcmV0c3ViCgpyZXBlYXRfZWxzZV9ib2R5QDI6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjQwCiAgICAvLyBlbGlmIGRlcHRoID09IDE6CiAgICBmcmFtZV9kaWcgLTEKICAgIGludCAxCiAgICA9PQogICAgYnogcmVwZWF0X2Vsc2VfYm9keUA0CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjQxCiAgICAvLyByZXR1cm4geW91CiAgICBmcmFtZV9kaWcgLTIKICAgIHJldHN1YgoKcmVwZWF0X2Vsc2VfYm9keUA0OgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weTo0MwogICAgLy8gcmV0dXJuIHlvdSArICIsICIgKyBzZWxmLnJlcGVhdCh5b3UsIGRlcHRoIC0gMSkKICAgIGZyYW1lX2RpZyAtMgogICAgYnl0ZSAiLCAiCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMQogICAgaW50IDEKICAgIC0KICAgIGZyYW1lX2RpZyAtMgogICAgc3dhcAogICAgY2FsbHN1YiByZXBlYXQKICAgIGNvbmNhdAogICAgcmV0c3ViCgoKLy8gb3BlbnN1Ym1hcmluZS5jb250cmFjdHMuYWNjZXNzLk93bmFibGUuY29udHJhY3QuT3duYWJsZS50cmFuc2ZlcihuZXdfb3duZXI6IGJ5dGVzKSAtPiB2b2lkOgp0cmFuc2ZlcjoKICAgIC8vIHVzci9sb2NhbC9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL29wZW5zdWJtYXJpbmUvY29udHJhY3RzL2FjY2Vzcy9Pd25hYmxlL2NvbnRyYWN0LnB5OjM1LTM2CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiB0cmFuc2ZlcihzZWxmLCBuZXdfb3duZXI6IGFyYzQuQWRkcmVzcykgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gdXNyL2xvY2FsL2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvb3BlbnN1Ym1hcmluZS9jb250cmFjdHMvYWNjZXNzL093bmFibGUvY29udHJhY3QucHk6MzcKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYub3duZXIsICJtdXN0IGJlIG93bmVyIgogICAgdHhuIFNlbmRlcgogICAgaW50IDAKICAgIC8vIHVzci9sb2NhbC9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL29wZW5zdWJtYXJpbmUvY29udHJhY3RzL2FjY2Vzcy9Pd25hYmxlL2NvbnRyYWN0LnB5OjIxCiAgICAvLyBzZWxmLm93bmVyID0gQWNjb3VudCgpCiAgICBieXRlICJvd25lciIKICAgIC8vIHVzci9sb2NhbC9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL29wZW5zdWJtYXJpbmUvY29udHJhY3RzL2FjY2Vzcy9Pd25hYmxlL2NvbnRyYWN0LnB5OjM3CiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLm93bmVyLCAibXVzdCBiZSBvd25lciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5vd25lciBleGlzdHMKICAgID09CiAgICBhc3NlcnQgLy8gbXVzdCBiZSBvd25lcgogICAgLy8gdXNyL2xvY2FsL2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvb3BlbnN1Ym1hcmluZS9jb250cmFjdHMvYWNjZXNzL093bmFibGUvY29udHJhY3QucHk6MzgKICAgIC8vIGFyYzQuZW1pdChPd25lcnNoaXBUcmFuc2ZlcnJlZChhcmM0LkFkZHJlc3Moc2VsZi5vd25lciksIG5ld19vd25lcikpCiAgICBpbnQgMAogICAgLy8gdXNyL2xvY2FsL2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvb3BlbnN1Ym1hcmluZS9jb250cmFjdHMvYWNjZXNzL093bmFibGUvY29udHJhY3QucHk6MjEKICAgIC8vIHNlbGYub3duZXIgPSBBY2NvdW50KCkKICAgIGJ5dGUgIm93bmVyIgogICAgLy8gdXNyL2xvY2FsL2xpYi9weXRob24zLjEyL3NpdGUtcGFja2FnZXMvb3BlbnN1Ym1hcmluZS9jb250cmFjdHMvYWNjZXNzL093bmFibGUvY29udHJhY3QucHk6MzgKICAgIC8vIGFyYzQuZW1pdChPd25lcnNoaXBUcmFuc2ZlcnJlZChhcmM0LkFkZHJlc3Moc2VsZi5vd25lciksIG5ld19vd25lcikpCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYub3duZXIgZXhpc3RzCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgbWV0aG9kICJPd25lcnNoaXBUcmFuc2ZlcnJlZChhZGRyZXNzLGFkZHJlc3MpIgogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIC8vIHVzci9sb2NhbC9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL29wZW5zdWJtYXJpbmUvY29udHJhY3RzL2FjY2Vzcy9Pd25hYmxlL2NvbnRyYWN0LnB5OjIxCiAgICAvLyBzZWxmLm93bmVyID0gQWNjb3VudCgpCiAgICBieXRlICJvd25lciIKICAgIC8vIHVzci9sb2NhbC9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL29wZW5zdWJtYXJpbmUvY29udHJhY3RzL2FjY2Vzcy9Pd25hYmxlL2NvbnRyYWN0LnB5OjM5CiAgICAvLyBzZWxmLm93bmVyID0gbmV3X293bmVyLm5hdGl2ZQogICAgZnJhbWVfZGlnIC0xCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gY29udHJhY3QuSGVsbG9Xb3JsZC5fX2luaXRfXygpIC0+IHZvaWQ6Cl9faW5pdF9fOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToxOQogICAgLy8gZGVmIF9faW5pdF9fKHNlbGYpIC0+IE5vbmU6CiAgICBwcm90byAwIDAKICAgIC8vIHVzci9sb2NhbC9saWIvcHl0aG9uMy4xMi9zaXRlLXBhY2thZ2VzL29wZW5zdWJtYXJpbmUvY29udHJhY3RzL2FjY2Vzcy9Pd25hYmxlL2NvbnRyYWN0LnB5OjIxCiAgICAvLyBzZWxmLm93bmVyID0gQWNjb3VudCgpCiAgICBieXRlICJvd25lciIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjAtMjIKICAgIC8vICMgb3duYWJsZSBzdGF0ZQogICAgLy8gIyBPd25hYmxlIGhhcyBvd25lciBzdGF0ZSB3aGljaCB3ZSBtdXN0IGluaXRpYWxpemUKICAgIC8vIHNlbGYub3duZXIgPSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzICAjIHNldCBvd25lciB0byBjcmVhdG9yCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIK",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpjb250cmFjdC5IZWxsb1dvcmxkLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjE0CiAgICAvLyBjbGFzcyBIZWxsb1dvcmxkKE93bmFibGUpOgogICAgaW50IDEKICAgIHJldHVybgo="
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "owner": {
                    "type": "bytes",
                    "key": "owner"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "HelloWorld",
        "desc": "\n    A simple Hello World smart contract that inherits from Ownable.\n    ",
        "methods": [
            {
                "name": "hello_world",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "hello_you",
                "args": [
                    {
                        "type": "string",
                        "name": "you"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "hello_you_again",
                "args": [
                    {
                        "type": "string",
                        "name": "you"
                    },
                    {
                        "type": "uint64",
                        "name": "depth"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                }
            },
            {
                "name": "transfer",
                "args": [
                    {
                        "type": "address",
                        "name": "new_owner"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
};
/**
 * Exposes methods for constructing all available smart contract calls
 */
export class HelloWorldCallFactory {
    /**
     * Gets available create call factories
     */
    static get create() {
        return {
            /**
             * Constructs a create call for the HelloWorld smart contract using a bare call
             *
             * @param params Any parameters for the call
             * @returns A TypedCallParams object for the call
             */
            bare(params = {}) {
                return {
                    method: undefined,
                    methodArgs: undefined,
                    ...params,
                };
            },
        };
    }
    /**
     * Constructs a no op call for the hello_world()string ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static helloWorld(args, params) {
        return {
            method: 'hello_world()string',
            methodArgs: Array.isArray(args) ? args : [],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the hello_you(string)string ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static helloYou(args, params) {
        return {
            method: 'hello_you(string)string',
            methodArgs: Array.isArray(args) ? args : [args.you],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the hello_you_again(string,uint64)string ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static helloYouAgain(args, params) {
        return {
            method: 'hello_you_again(string,uint64)string',
            methodArgs: Array.isArray(args) ? args : [args.you, args.depth],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the transfer(address)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static transfer(args, params) {
        return {
            method: 'transfer(address)void',
            methodArgs: Array.isArray(args) ? args : [args.newOwner],
            ...params,
        };
    }
}
/**
 * A client to make calls to the HelloWorld smart contract
 */
export class HelloWorldClient {
    algod;
    /**
     * The underlying `ApplicationClient` for when you want to have more flexibility
     */
    appClient;
    sender;
    /**
     * Creates a new instance of `HelloWorldClient`
     *
     * @param appDetails appDetails The details to identify the app to deploy
     * @param algod An algod client instance
     */
    constructor(appDetails, algod) {
        this.algod = algod;
        this.sender = appDetails.sender;
        this.appClient = algokit.getAppClient({
            ...appDetails,
            app: APP_SPEC
        }, algod);
    }
    /**
     * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
     *
     * @param result The AppCallTransactionResult to be mapped
     * @param returnValueFormatter An optional delegate to format the return value if required
     * @returns The smart contract response with an updated return value
     */
    mapReturnValue(result, returnValueFormatter) {
        if (result.return?.decodeError) {
            throw result.return.decodeError;
        }
        const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
            ? returnValueFormatter(result.return.returnValue)
            : result.return?.returnValue;
        return { ...result, return: returnValue };
    }
    /**
     * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
     *
     * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
     * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
     * @returns The result of the smart contract call
     */
    async call(typedCallParams, returnValueFormatter) {
        return this.mapReturnValue(await this.appClient.call(typedCallParams), returnValueFormatter);
    }
    /**
     * Idempotently deploys the HelloWorld smart contract.
     *
     * @param params The arguments for the contract calls and any additional parameters for the call
     * @returns The deployment result
     */
    deploy(params = {}) {
        const createArgs = params.createCall?.(HelloWorldCallFactory.create);
        return this.appClient.deploy({
            ...params,
            createArgs,
            createOnCompleteAction: createArgs?.onCompleteAction,
        });
    }
    /**
     * Gets available create methods
     */
    get create() {
        const $this = this;
        return {
            /**
             * Creates a new instance of the HelloWorld smart contract using a bare call.
             *
             * @param args The arguments for the bare call
             * @returns The create result
             */
            async bare(args = {}) {
                return $this.mapReturnValue(await $this.appClient.create(args));
            },
        };
    }
    /**
     * Makes a clear_state call to an existing instance of the HelloWorld smart contract.
     *
     * @param args The arguments for the bare call
     * @returns The clear_state result
     */
    clearState(args = {}) {
        return this.appClient.clearState(args);
    }
    /**
     * Calls the hello_world()string ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    helloWorld(args, params = {}) {
        return this.call(HelloWorldCallFactory.helloWorld(args, params));
    }
    /**
     * Calls the hello_you(string)string ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    helloYou(args, params = {}) {
        return this.call(HelloWorldCallFactory.helloYou(args, params));
    }
    /**
     * Calls the hello_you_again(string,uint64)string ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    helloYouAgain(args, params = {}) {
        return this.call(HelloWorldCallFactory.helloYouAgain(args, params));
    }
    /**
     * Calls the transfer(address)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    transfer(args, params = {}) {
        return this.call(HelloWorldCallFactory.transfer(args, params));
    }
    /**
     * Extracts a binary state value out of an AppState dictionary
     *
     * @param state The state dictionary containing the state value
     * @param key The key of the state value
     * @returns A BinaryState instance containing the state value, or undefined if the key was not found
     */
    static getBinaryState(state, key) {
        const value = state[key];
        if (!value)
            return undefined;
        if (!('valueRaw' in value))
            throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`);
        return {
            asString() {
                return value.value;
            },
            asByteArray() {
                return value.valueRaw;
            }
        };
    }
    /**
     * Extracts a integer state value out of an AppState dictionary
     *
     * @param state The state dictionary containing the state value
     * @param key The key of the state value
     * @returns An IntegerState instance containing the state value, or undefined if the key was not found
     */
    static getIntegerState(state, key) {
        const value = state[key];
        if (!value)
            return undefined;
        if ('valueRaw' in value)
            throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`);
        return {
            asBigInt() {
                return typeof value.value === 'bigint' ? value.value : BigInt(value.value);
            },
            asNumber() {
                return typeof value.value === 'bigint' ? Number(value.value) : value.value;
            },
        };
    }
    /**
     * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
     */
    async getGlobalState() {
        const state = await this.appClient.getGlobalState();
        return {
            get owner() {
                return HelloWorldClient.getBinaryState(state, 'owner');
            },
        };
    }
    compose() {
        const client = this;
        const atc = new AtomicTransactionComposer();
        let promiseChain = Promise.resolve();
        const resultMappers = [];
        return {
            helloWorld(args, params) {
                promiseChain = promiseChain.then(() => client.helloWorld(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            helloYou(args, params) {
                promiseChain = promiseChain.then(() => client.helloYou(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            helloYouAgain(args, params) {
                promiseChain = promiseChain.then(() => client.helloYouAgain(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            transfer(args, params) {
                promiseChain = promiseChain.then(() => client.transfer(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            clearState(args) {
                promiseChain = promiseChain.then(() => client.clearState({ ...args, sendParams: { ...args?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            addTransaction(txn, defaultSender) {
                promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)));
                return this;
            },
            async atc() {
                await promiseChain;
                return atc;
            },
            async simulate(options) {
                await promiseChain;
                const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }));
                return {
                    ...result,
                    returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i](val.returnValue) : val.returnValue)
                };
            },
            async execute(sendParams) {
                await promiseChain;
                const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod);
                return {
                    ...result,
                    returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i](val.returnValue) : val.returnValue)
                };
            }
        };
    }
}

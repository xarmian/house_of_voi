/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils';
import { AtomicTransactionComposer, modelsv2 } from 'algosdk';
export const APP_SPEC = {
    "hints": {
        "bootstrap()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "bootstrap_cost()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "transfer_ownership(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_grid(byte[32])byte[15]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_payline_count()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_payline(uint64)uint64[5]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_paylines()uint64[100]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "match_payline(byte[15],uint64)(uint64,byte)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "PaylineMatch",
                    "elements": [
                        [
                            "count",
                            "uint64"
                        ],
                        [
                            "initial_symbol",
                            "byte"
                        ]
                    ]
                }
            }
        },
        "get_bet_grid(byte[56])byte[15]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claim(byte[56])uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_payout_multiplier(byte,uint64)uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_bet_claim_round(byte[56])uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "spin_payline_cost()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "spin(uint64,uint64,uint64)byte[56]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "spin_cost()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "owner_deposit(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deposit()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_balance_available()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_balance_locked()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_balance_total()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_reel(uint64)byte[100]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_slot(uint64,uint64)byte[1]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_reel_window(uint64,uint64)byte[3]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_owner()address": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_reels()byte[500]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_reel_length()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_reel_count()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpjb250cmFjdC5TbG90TWFjaGluZS5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToxMDEyCiAgICAvLyBjbGFzcyBTbG90TWFjaGluZShTcGluTWFuYWdlciwgUmVlbE1hbmFnZXIsIE93bmFibGUpOgogICAgaW50IDEKICAgIHJldHVybgo="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "SlotMachine",
        "desc": "\n    A simple reel slot machine smart contract\n\n    Boxes:\n        balance*\n        *others*\n            slot machine\n                payline_count UInt64 (default: 9)\n                paylines UInt64[45] (default: *)\n\n    ",
        "methods": [
            {
                "name": "bootstrap",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "bootstrap_cost",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "transfer_ownership",
                "args": [
                    {
                        "type": "address",
                        "name": "new_owner"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Transfer the ownership of the contract"
            },
            {
                "name": "get_grid",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "seed"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "byte[15]"
                },
                "desc": "Get the grid of the slot machine."
            },
            {
                "name": "get_payline_count",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "get_payline",
                "args": [
                    {
                        "type": "uint64",
                        "name": "payline_index"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint64[5]"
                }
            },
            {
                "name": "get_paylines",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64[100]"
                }
            },
            {
                "name": "match_payline",
                "args": [
                    {
                        "type": "byte[15]",
                        "name": "grid"
                    },
                    {
                        "type": "uint64",
                        "name": "payline_index"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "(uint64,byte)"
                },
                "desc": "Match grid to payline by index\nReturns payline match         count, number of consecutive matches on payline         initial_symbol, staring symbol"
            },
            {
                "name": "get_bet_grid",
                "args": [
                    {
                        "type": "byte[56]",
                        "name": "bet_key"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "byte[15]"
                }
            },
            {
                "name": "claim",
                "args": [
                    {
                        "type": "byte[56]",
                        "name": "bet_key",
                        "desc": "The key of the bet to claim"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "The payout for the bet"
                },
                "desc": "Claim a bet"
            },
            {
                "name": "get_payout_multiplier",
                "args": [
                    {
                        "type": "byte",
                        "name": "symbol"
                    },
                    {
                        "type": "uint64",
                        "name": "count"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "get_bet_claim_round",
                "args": [
                    {
                        "type": "byte[56]",
                        "name": "bet_key"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "spin_payline_cost",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "spin",
                "args": [
                    {
                        "type": "uint64",
                        "name": "bet_amount"
                    },
                    {
                        "type": "uint64",
                        "name": "max_payline_index",
                        "desc": "The maximum payline index."
                    },
                    {
                        "type": "uint64",
                        "name": "index",
                        "desc": "Player's choice of index."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "byte[56]",
                    "desc": "bet_key (bytes): The bet key."
                },
                "desc": "Spin the slot machine. Outcome is determined by the seed\nof future round."
            },
            {
                "name": "spin_cost",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "owner_deposit",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Deposit funds into the contract as owner. The owner is expected to\nhave already submitted the payment."
            },
            {
                "name": "deposit",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Deposit funds into the contract"
            },
            {
                "name": "withdraw",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount",
                        "desc": "The amount of funds to withdraw in atomic units"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Withdraw funds from the contract\nOnly callable by contract owner"
            },
            {
                "name": "get_balance_available",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Get the available balance"
            },
            {
                "name": "get_balance_locked",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Get the locked balance"
            },
            {
                "name": "get_balance_total",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Get the total balance"
            },
            {
                "name": "get_reel",
                "args": [
                    {
                        "type": "uint64",
                        "name": "reel"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "byte[100]"
                },
                "desc": "Get the reel at the given index. Ensures the reel index is within bounds."
            },
            {
                "name": "get_slot",
                "args": [
                    {
                        "type": "uint64",
                        "name": "reel"
                    },
                    {
                        "type": "uint64",
                        "name": "index"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "byte[1]"
                },
                "desc": "Get the slot at the given index. Ensures the reel index and slot index are within bounds."
            },
            {
                "name": "get_reel_window",
                "args": [
                    {
                        "type": "uint64",
                        "name": "reel"
                    },
                    {
                        "type": "uint64",
                        "name": "index"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "byte[3]"
                },
                "desc": "Get the reel window at the given index. Ensures the reel index and window index are within bounds."
            },
            {
                "name": "get_owner",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "address"
                },
                "desc": "Get the owner of the contract"
            },
            {
                "name": "get_reels",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "byte[500]"
                }
            },
            {
                "name": "get_reel_length",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "get_reel_count",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
};
/**
 * Converts the tuple representation of a PaylineMatch to the struct representation
 */
export function PaylineMatch([count, initialSymbol]) {
    return {
        count,
        initialSymbol,
    };
}
/**
 * Exposes methods for constructing all available smart contract calls
 */
export class SlotMachineCallFactory {
    /**
     * Gets available create call factories
     */
    static get create() {
        return {
            /**
             * Constructs a create call for the SlotMachine smart contract using a bare call
             *
             * @param params Any parameters for the call
             * @returns A TypedCallParams object for the call
             */
            bare(params = {}) {
                return {
                    method: undefined,
                    methodArgs: undefined,
                    ...params,
                };
            },
        };
    }
    /**
     * Constructs a no op call for the bootstrap()void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static bootstrap(args, params) {
        return {
            method: 'bootstrap()void',
            methodArgs: Array.isArray(args) ? args : [],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the bootstrap_cost()uint64 ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static bootstrapCost(args, params) {
        return {
            method: 'bootstrap_cost()uint64',
            methodArgs: Array.isArray(args) ? args : [],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the transfer_ownership(address)void ABI method
     *
     * Transfer the ownership of the contract
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static transferOwnership(args, params) {
        return {
            method: 'transfer_ownership(address)void',
            methodArgs: Array.isArray(args) ? args : [args.newOwner],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the get_grid(byte[32])byte[15] ABI method
     *
     * Get the grid of the slot machine.
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static getGrid(args, params) {
        return {
            method: 'get_grid(byte[32])byte[15]',
            methodArgs: Array.isArray(args) ? args : [args.seed],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the get_payline_count()uint64 ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static getPaylineCount(args, params) {
        return {
            method: 'get_payline_count()uint64',
            methodArgs: Array.isArray(args) ? args : [],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the get_payline(uint64)uint64[5] ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static getPayline(args, params) {
        return {
            method: 'get_payline(uint64)uint64[5]',
            methodArgs: Array.isArray(args) ? args : [args.paylineIndex],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the get_paylines()uint64[100] ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static getPaylines(args, params) {
        return {
            method: 'get_paylines()uint64[100]',
            methodArgs: Array.isArray(args) ? args : [],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the match_payline(byte[15],uint64)(uint64,byte) ABI method
     *
     * Match grid to payline by index
  Returns payline match         count, number of consecutive matches on payline         initial_symbol, staring symbol
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static matchPayline(args, params) {
        return {
            method: 'match_payline(byte[15],uint64)(uint64,byte)',
            methodArgs: Array.isArray(args) ? args : [args.grid, args.paylineIndex],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the get_bet_grid(byte[56])byte[15] ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static getBetGrid(args, params) {
        return {
            method: 'get_bet_grid(byte[56])byte[15]',
            methodArgs: Array.isArray(args) ? args : [args.betKey],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the claim(byte[56])uint64 ABI method
     *
     * Claim a bet
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static claim(args, params) {
        return {
            method: 'claim(byte[56])uint64',
            methodArgs: Array.isArray(args) ? args : [args.betKey],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the get_payout_multiplier(byte,uint64)uint64 ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static getPayoutMultiplier(args, params) {
        return {
            method: 'get_payout_multiplier(byte,uint64)uint64',
            methodArgs: Array.isArray(args) ? args : [args.symbol, args.count],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the get_bet_claim_round(byte[56])uint64 ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static getBetClaimRound(args, params) {
        return {
            method: 'get_bet_claim_round(byte[56])uint64',
            methodArgs: Array.isArray(args) ? args : [args.betKey],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the spin_payline_cost()uint64 ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static spinPaylineCost(args, params) {
        return {
            method: 'spin_payline_cost()uint64',
            methodArgs: Array.isArray(args) ? args : [],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the spin(uint64,uint64,uint64)byte[56] ABI method
     *
     * Spin the slot machine. Outcome is determined by the seed
  of future round.
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static spin(args, params) {
        return {
            method: 'spin(uint64,uint64,uint64)byte[56]',
            methodArgs: Array.isArray(args) ? args : [args.betAmount, args.maxPaylineIndex, args.index],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the spin_cost()uint64 ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static spinCost(args, params) {
        return {
            method: 'spin_cost()uint64',
            methodArgs: Array.isArray(args) ? args : [],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the owner_deposit(uint64)void ABI method
     *
     * Deposit funds into the contract as owner. The owner is expected to
  have already submitted the payment.
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static ownerDeposit(args, params) {
        return {
            method: 'owner_deposit(uint64)void',
            methodArgs: Array.isArray(args) ? args : [args.amount],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the deposit()void ABI method
     *
     * Deposit funds into the contract
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static deposit(args, params) {
        return {
            method: 'deposit()void',
            methodArgs: Array.isArray(args) ? args : [],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the withdraw(uint64)void ABI method
     *
     * Withdraw funds from the contract
  Only callable by contract owner
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static withdraw(args, params) {
        return {
            method: 'withdraw(uint64)void',
            methodArgs: Array.isArray(args) ? args : [args.amount],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the get_balance_available()uint64 ABI method
     *
     * Get the available balance
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static getBalanceAvailable(args, params) {
        return {
            method: 'get_balance_available()uint64',
            methodArgs: Array.isArray(args) ? args : [],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the get_balance_locked()uint64 ABI method
     *
     * Get the locked balance
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static getBalanceLocked(args, params) {
        return {
            method: 'get_balance_locked()uint64',
            methodArgs: Array.isArray(args) ? args : [],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the get_balance_total()uint64 ABI method
     *
     * Get the total balance
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static getBalanceTotal(args, params) {
        return {
            method: 'get_balance_total()uint64',
            methodArgs: Array.isArray(args) ? args : [],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the get_reel(uint64)byte[100] ABI method
     *
     * Get the reel at the given index. Ensures the reel index is within bounds.
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static getReel(args, params) {
        return {
            method: 'get_reel(uint64)byte[100]',
            methodArgs: Array.isArray(args) ? args : [args.reel],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the get_slot(uint64,uint64)byte[1] ABI method
     *
     * Get the slot at the given index. Ensures the reel index and slot index are within bounds.
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static getSlot(args, params) {
        return {
            method: 'get_slot(uint64,uint64)byte[1]',
            methodArgs: Array.isArray(args) ? args : [args.reel, args.index],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the get_reel_window(uint64,uint64)byte[3] ABI method
     *
     * Get the reel window at the given index. Ensures the reel index and window index are within bounds.
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static getReelWindow(args, params) {
        return {
            method: 'get_reel_window(uint64,uint64)byte[3]',
            methodArgs: Array.isArray(args) ? args : [args.reel, args.index],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the get_owner()address ABI method
     *
     * Get the owner of the contract
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static getOwner(args, params) {
        return {
            method: 'get_owner()address',
            methodArgs: Array.isArray(args) ? args : [],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the get_reels()byte[500] ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static getReels(args, params) {
        return {
            method: 'get_reels()byte[500]',
            methodArgs: Array.isArray(args) ? args : [],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the get_reel_length()uint64 ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static getReelLength(args, params) {
        return {
            method: 'get_reel_length()uint64',
            methodArgs: Array.isArray(args) ? args : [],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the get_reel_count()uint64 ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static getReelCount(args, params) {
        return {
            method: 'get_reel_count()uint64',
            methodArgs: Array.isArray(args) ? args : [],
            ...params,
        };
    }
}
/**
 * A client to make calls to the SlotMachine smart contract
 */
export class SlotMachineClient {
    algod;
    /**
     * The underlying `ApplicationClient` for when you want to have more flexibility
     */
    appClient;
    sender;
    /**
     * Creates a new instance of `SlotMachineClient`
     *
     * @param appDetails appDetails The details to identify the app to deploy
     * @param algod An algod client instance
     */
    constructor(appDetails, algod) {
        this.algod = algod;
        this.sender = appDetails.sender;
        this.appClient = algokit.getAppClient({
            ...appDetails,
            app: APP_SPEC
        }, algod);
    }
    /**
     * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
     *
     * @param result The AppCallTransactionResult to be mapped
     * @param returnValueFormatter An optional delegate to format the return value if required
     * @returns The smart contract response with an updated return value
     */
    mapReturnValue(result, returnValueFormatter) {
        if (result.return?.decodeError) {
            throw result.return.decodeError;
        }
        const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
            ? returnValueFormatter(result.return.returnValue)
            : result.return?.returnValue;
        return { ...result, return: returnValue };
    }
    /**
     * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
     *
     * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
     * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
     * @returns The result of the smart contract call
     */
    async call(typedCallParams, returnValueFormatter) {
        return this.mapReturnValue(await this.appClient.call(typedCallParams), returnValueFormatter);
    }
    /**
     * Idempotently deploys the SlotMachine smart contract.
     *
     * @param params The arguments for the contract calls and any additional parameters for the call
     * @returns The deployment result
     */
    deploy(params = {}) {
        const createArgs = params.createCall?.(SlotMachineCallFactory.create);
        return this.appClient.deploy({
            ...params,
            createArgs,
            createOnCompleteAction: createArgs?.onCompleteAction,
        });
    }
    /**
     * Gets available create methods
     */
    get create() {
        const $this = this;
        return {
            /**
             * Creates a new instance of the SlotMachine smart contract using a bare call.
             *
             * @param args The arguments for the bare call
             * @returns The create result
             */
            async bare(args = {}) {
                return $this.mapReturnValue(await $this.appClient.create(args));
            },
        };
    }
    /**
     * Makes a clear_state call to an existing instance of the SlotMachine smart contract.
     *
     * @param args The arguments for the bare call
     * @returns The clear_state result
     */
    clearState(args = {}) {
        return this.appClient.clearState(args);
    }
    /**
     * Calls the bootstrap()void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    bootstrap(args, params = {}) {
        return this.call(SlotMachineCallFactory.bootstrap(args, params));
    }
    /**
     * Calls the bootstrap_cost()uint64 ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    bootstrapCost(args, params = {}) {
        return this.call(SlotMachineCallFactory.bootstrapCost(args, params));
    }
    /**
     * Calls the transfer_ownership(address)void ABI method.
     *
     * Transfer the ownership of the contract
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    transferOwnership(args, params = {}) {
        return this.call(SlotMachineCallFactory.transferOwnership(args, params));
    }
    /**
     * Calls the get_grid(byte[32])byte[15] ABI method.
     *
     * Get the grid of the slot machine.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    getGrid(args, params = {}) {
        return this.call(SlotMachineCallFactory.getGrid(args, params));
    }
    /**
     * Calls the get_payline_count()uint64 ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    getPaylineCount(args, params = {}) {
        return this.call(SlotMachineCallFactory.getPaylineCount(args, params));
    }
    /**
     * Calls the get_payline(uint64)uint64[5] ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    getPayline(args, params = {}) {
        return this.call(SlotMachineCallFactory.getPayline(args, params));
    }
    /**
     * Calls the get_paylines()uint64[100] ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    getPaylines(args, params = {}) {
        return this.call(SlotMachineCallFactory.getPaylines(args, params));
    }
    /**
     * Calls the match_payline(byte[15],uint64)(uint64,byte) ABI method.
     *
     * Match grid to payline by index
  Returns payline match         count, number of consecutive matches on payline         initial_symbol, staring symbol
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    matchPayline(args, params = {}) {
        return this.call(SlotMachineCallFactory.matchPayline(args, params), PaylineMatch);
    }
    /**
     * Calls the get_bet_grid(byte[56])byte[15] ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    getBetGrid(args, params = {}) {
        return this.call(SlotMachineCallFactory.getBetGrid(args, params));
    }
    /**
     * Calls the claim(byte[56])uint64 ABI method.
     *
     * Claim a bet
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call: The payout for the bet
     */
    claim(args, params = {}) {
        return this.call(SlotMachineCallFactory.claim(args, params));
    }
    /**
     * Calls the get_payout_multiplier(byte,uint64)uint64 ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    getPayoutMultiplier(args, params = {}) {
        return this.call(SlotMachineCallFactory.getPayoutMultiplier(args, params));
    }
    /**
     * Calls the get_bet_claim_round(byte[56])uint64 ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    getBetClaimRound(args, params = {}) {
        return this.call(SlotMachineCallFactory.getBetClaimRound(args, params));
    }
    /**
     * Calls the spin_payline_cost()uint64 ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    spinPaylineCost(args, params = {}) {
        return this.call(SlotMachineCallFactory.spinPaylineCost(args, params));
    }
    /**
     * Calls the spin(uint64,uint64,uint64)byte[56] ABI method.
     *
     * Spin the slot machine. Outcome is determined by the seed
  of future round.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call: bet_key (bytes): The bet key.
     */
    spin(args, params = {}) {
        return this.call(SlotMachineCallFactory.spin(args, params));
    }
    /**
     * Calls the spin_cost()uint64 ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    spinCost(args, params = {}) {
        return this.call(SlotMachineCallFactory.spinCost(args, params));
    }
    /**
     * Calls the owner_deposit(uint64)void ABI method.
     *
     * Deposit funds into the contract as owner. The owner is expected to
  have already submitted the payment.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    ownerDeposit(args, params = {}) {
        return this.call(SlotMachineCallFactory.ownerDeposit(args, params));
    }
    /**
     * Calls the deposit()void ABI method.
     *
     * Deposit funds into the contract
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    deposit(args, params = {}) {
        return this.call(SlotMachineCallFactory.deposit(args, params));
    }
    /**
     * Calls the withdraw(uint64)void ABI method.
     *
     * Withdraw funds from the contract
  Only callable by contract owner
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    withdraw(args, params = {}) {
        return this.call(SlotMachineCallFactory.withdraw(args, params));
    }
    /**
     * Calls the get_balance_available()uint64 ABI method.
     *
     * Get the available balance
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    getBalanceAvailable(args, params = {}) {
        return this.call(SlotMachineCallFactory.getBalanceAvailable(args, params));
    }
    /**
     * Calls the get_balance_locked()uint64 ABI method.
     *
     * Get the locked balance
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    getBalanceLocked(args, params = {}) {
        return this.call(SlotMachineCallFactory.getBalanceLocked(args, params));
    }
    /**
     * Calls the get_balance_total()uint64 ABI method.
     *
     * Get the total balance
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    getBalanceTotal(args, params = {}) {
        return this.call(SlotMachineCallFactory.getBalanceTotal(args, params));
    }
    /**
     * Calls the get_reel(uint64)byte[100] ABI method.
     *
     * Get the reel at the given index. Ensures the reel index is within bounds.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    getReel(args, params = {}) {
        return this.call(SlotMachineCallFactory.getReel(args, params));
    }
    /**
     * Calls the get_slot(uint64,uint64)byte[1] ABI method.
     *
     * Get the slot at the given index. Ensures the reel index and slot index are within bounds.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    getSlot(args, params = {}) {
        return this.call(SlotMachineCallFactory.getSlot(args, params));
    }
    /**
     * Calls the get_reel_window(uint64,uint64)byte[3] ABI method.
     *
     * Get the reel window at the given index. Ensures the reel index and window index are within bounds.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    getReelWindow(args, params = {}) {
        return this.call(SlotMachineCallFactory.getReelWindow(args, params));
    }
    /**
     * Calls the get_owner()address ABI method.
     *
     * Get the owner of the contract
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    getOwner(args, params = {}) {
        return this.call(SlotMachineCallFactory.getOwner(args, params));
    }
    /**
     * Calls the get_reels()byte[500] ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    getReels(args, params = {}) {
        return this.call(SlotMachineCallFactory.getReels(args, params));
    }
    /**
     * Calls the get_reel_length()uint64 ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    getReelLength(args, params = {}) {
        return this.call(SlotMachineCallFactory.getReelLength(args, params));
    }
    /**
     * Calls the get_reel_count()uint64 ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    getReelCount(args, params = {}) {
        return this.call(SlotMachineCallFactory.getReelCount(args, params));
    }
    compose() {
        const client = this;
        const atc = new AtomicTransactionComposer();
        let promiseChain = Promise.resolve();
        const resultMappers = [];
        return {
            bootstrap(args, params) {
                promiseChain = promiseChain.then(() => client.bootstrap(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            bootstrapCost(args, params) {
                promiseChain = promiseChain.then(() => client.bootstrapCost(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            transferOwnership(args, params) {
                promiseChain = promiseChain.then(() => client.transferOwnership(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            getGrid(args, params) {
                promiseChain = promiseChain.then(() => client.getGrid(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            getPaylineCount(args, params) {
                promiseChain = promiseChain.then(() => client.getPaylineCount(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            getPayline(args, params) {
                promiseChain = promiseChain.then(() => client.getPayline(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            getPaylines(args, params) {
                promiseChain = promiseChain.then(() => client.getPaylines(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            matchPayline(args, params) {
                promiseChain = promiseChain.then(() => client.matchPayline(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(PaylineMatch);
                return this;
            },
            getBetGrid(args, params) {
                promiseChain = promiseChain.then(() => client.getBetGrid(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            claim(args, params) {
                promiseChain = promiseChain.then(() => client.claim(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            getPayoutMultiplier(args, params) {
                promiseChain = promiseChain.then(() => client.getPayoutMultiplier(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            getBetClaimRound(args, params) {
                promiseChain = promiseChain.then(() => client.getBetClaimRound(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            spinPaylineCost(args, params) {
                promiseChain = promiseChain.then(() => client.spinPaylineCost(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            spin(args, params) {
                promiseChain = promiseChain.then(() => client.spin(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            spinCost(args, params) {
                promiseChain = promiseChain.then(() => client.spinCost(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            ownerDeposit(args, params) {
                promiseChain = promiseChain.then(() => client.ownerDeposit(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            deposit(args, params) {
                promiseChain = promiseChain.then(() => client.deposit(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            withdraw(args, params) {
                promiseChain = promiseChain.then(() => client.withdraw(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            getBalanceAvailable(args, params) {
                promiseChain = promiseChain.then(() => client.getBalanceAvailable(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            getBalanceLocked(args, params) {
                promiseChain = promiseChain.then(() => client.getBalanceLocked(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            getBalanceTotal(args, params) {
                promiseChain = promiseChain.then(() => client.getBalanceTotal(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            getReel(args, params) {
                promiseChain = promiseChain.then(() => client.getReel(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            getSlot(args, params) {
                promiseChain = promiseChain.then(() => client.getSlot(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            getReelWindow(args, params) {
                promiseChain = promiseChain.then(() => client.getReelWindow(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            getOwner(args, params) {
                promiseChain = promiseChain.then(() => client.getOwner(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            getReels(args, params) {
                promiseChain = promiseChain.then(() => client.getReels(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            getReelLength(args, params) {
                promiseChain = promiseChain.then(() => client.getReelLength(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            getReelCount(args, params) {
                promiseChain = promiseChain.then(() => client.getReelCount(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            clearState(args) {
                promiseChain = promiseChain.then(() => client.clearState({ ...args, sendParams: { ...args?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            addTransaction(txn, defaultSender) {
                promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)));
                return this;
            },
            async atc() {
                await promiseChain;
                return atc;
            },
            async simulate(options) {
                await promiseChain;
                const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }));
                return {
                    ...result,
                    returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i](val.returnValue) : val.returnValue)
                };
            },
            async execute(sendParams) {
                await promiseChain;
                const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod);
                return {
                    ...result,
                    returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i](val.returnValue) : val.returnValue)
                };
            }
        };
    }
}
